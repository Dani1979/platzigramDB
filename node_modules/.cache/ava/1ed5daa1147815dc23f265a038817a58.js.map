{"version":3,"sources":["db-test.js"],"names":["test","require","Db","uuid","r","fixtures","beforeEach","t","dbName","v4","db","connect","context","true","connected","afterEach","always","disconnect","false","conn","dbDrop","run","is","getImagesByUser","images","getImages","userId","console","log","length","saveImages","i","push","saveImage","Promise","all","result"],"mappings":"AAAA;;;;;;;AACA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA;AACA;AACA,MAAMC,KAAKD,QAAQ,KAAR,CAAX;AACA,MAAME,OAAOF,QAAQ,aAAR,CAAb;AACA;AACA,MAAMG,IAAIH,QAAQ,WAAR,CAAV;AACA,MAAMI,WAAWJ,QAAQ,YAAR,CAAjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,KAAKM,UAAL,CAAgB,gBAAhB;AAAA,+BAAkC,WAAMC,CAAN,EAAW;AAAA;;AAC3C,UAAMC,SAAU,cAAaL,KAAKM,EAAL,EAAU,EAAvC;AACA,UAAMC,KAAK,IAAIR,EAAJ,CAAO,EAAEQ,IAAIF,MAAN,EAAP,CAAX;AACA,UAAME,GAAGC,OAAH,EAAN;AACAJ,MAAEK,OAAF,CAAUF,EAAV,GAAeA,EAAf;AACAH,MAAEK,OAAF,CAAUJ,MAAV,GAAmBA,MAAnB;AACAD,MAAEM,IAAF,uBAAO,qCAAGC,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAqB,qBAArB;AACD,GAPD;;AAAA;AAAA;AAAA;AAAA;;AASAd,KAAKe,SAAL,CAAeC,MAAf,CAAsB,kBAAtB;AAAA,gCAA0C,WAAMT,CAAN,EAAW;AAAA;;AACnD,QAAIG,KAAKH,EAAEK,OAAF,CAAUF,EAAnB;AACA,QAAIF,SAASD,EAAEK,OAAF,CAAUJ,MAAvB;;AAEA,UAAME,GAAGO,UAAH,EAAN;AACAV,MAAEW,KAAF,yBAAQ,sCAAGJ,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAsB,sBAAtB;;AAEA,QAAIK,OAAO,MAAMf,EAAEO,OAAF,CAAU,EAAV,CAAjB;AACA,UAAMP,EAAEgB,MAAF,CAASZ,MAAT,EAAiBa,GAAjB,CAAqBF,IAArnB,KAAK,sBAAL;AAAA,gCAA6B,WAAMO,CAAN,EAAW;AACtC,QAAIG,KAAKH,EAAEK,OAAF,CAAUF,EAAnB;;AAEAH,MAAEe,EAAF,CAAK,OAAOZ,GAAGa,eAAf,EAAgC,UAAhC,EAA4C,gCAA5C;;AAEA,QAAIC,SAASnB,SAASoB,SAAT,CAAmB,EAAnB,CAAb;AACA,QAAIC,SAASvB,KAAKA,IAAL,EAAb;AACA;AACAwB,YAAQC,GAAR,CAAYJ,OAAOK,MAAnB;AACA,QAAIC,aAAa,EAAjB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIP,OAAOK,MAA3B,EAAmCE,CAAnC,EAAsC;AACpC;AACA;AACA;AACAP,aAAOO,CAAP,EAAUL,MAAV,GAAmBA,MAAnB;;AAEAI,iBAAWE,IAAX,CAAgBtB,GAAGuB,SAAH,CAAaT,OAAOO,CAAP,CAAb,CAAhB;AACD;;AAED,UAAMG,QAAQC,GAAR,CAAYL,UAAZ,CAAN;;AAEA,QAAIM,SAAS,MAAM1B,GAAGa,eAAH,CAAmBG,MAAnB,CAAnB;AACAnB,MAAEe,EAAF,CAAKc,OAAOP,MAAZ,EAAoBL,OAAOK,MAA3B;AACD,GAvBD;;AAAA;AAAA;AAAA;AAAA","file":"db-test.js","sourcesContent":["'use strict'\nconst test = require('ava')\n// importamos el wrap que hemos hecho en index js para\n// importar la calse de db\nconst Db = require('../')\nconst uuid = require('uuid-base62')\n// const r = require('rethinkdb')\nconst r = require('rethinkdb')\nconst fixtures = require('./fixtures')\n// const utils = require('../lib/utils')\n\n// test.before('setup database', async t => {\n//   await db.connect()\n//   t.true(db.connected, 'should be connected')\n// })\n//\n// test.after('disconnect databese', async t => {\n//   await db.disconnect()\n//   t.false(db.connected, 'should be disconneted')\n// })\n//\n// test.after.always('cleanup database', async t => {\n//   let conn = await r.connect({})\n//   await r.dbDrop(dbName).run(conn)\n// })\n\ntest.beforeEach('setup database', async t => {\n  const dbName = `platzigram_${uuid.v4()}`\n  const db = new Db({ db: dbName })\n  await db.connect()\n  t.context.db = db\n  t.context.dbName = dbName\n  t.true(db.connected, 'should be connected')\n})\n\ntest.afterEach.always('cleanup database', async t => {\n  let db = t.context.db\n  let dbName = t.context.dbName\n\n  await db.disconnect()\n  t.false(db.connected, 'should be disconnect')\n\n  let conn = await r.connect({})\n  await r.dbDrop(dbName).run(conn)\n})\n\n// test('save image', async t => {\n//   let db = t.context.db\n//\n//   t.is(typeof db.saveImage, 'function', 'save image is a function')\n//\n//   let image = fixtures.getImage()\n//\n//   let created = await db.saveImage(image)\n//   t.is(created.description, image.description)\n//   t.is(created.url, image.url)\n//   t.is(created.likes, image.likes)\n//   t.is(created.liked, image.liked)\n//   t.deepEqual(created.tags, [ 'awesome', 'tags', 'platzi' ])\n//   t.is(created.userId, image.userId)\n//   t.is(typeof created.id, 'string')\n//   t.is(created.publicId, uuid.encode(created.id))\n//   t.truthy(created.createdAt)\n// })\n//\n// test('like image', async t => {\n//   let db = t.context.db\n//\n//   t.is(typeof db.likeImage, 'function', 'like Images is a function')\n//\n//   let image = fixtures.getImage()\n//   let created = await db.saveImage(image)\n//   let result = await db.likeImage(created.publicId)\n//\n//   t.true(result.liked)\n//   t.is(result.likes, image.likes + 1)\n// })\n//\n// test('Get Image', async t => {\n//   let db = t.context.db\n//\n//   t.is(typeof db.getImage, 'function', 'getImage is a function')\n//\n//   let image = fixtures.getImage()\n//   let created = await db.saveImage(image)\n//   let result = await db.getImage(created.publicId)\n//\n//   t.deepEqual(created, result)\n//\n//   t.throws(db.getImage('foo'), /not found/)\n// })\n//\n// test('list all images', async t => {\n//   let db = t.context.db\n//\n//   let images = fixtures.getImages(5)\n//   // con la siguiente sentencia nos vamos a crear un array de promesas que posteriormente\n//   // las resolvemos todas mediante promise.all\n//   let saveImages = images.map(img => db.saveImage(img))\n//   let created = await Promise.all(saveImages)\n//   let result = await db.getImages()\n//\n//   t.is(created.lenght, result.lenght)\n// })\n//\n// test('encrypt password', t => {\n//   let password = 'foo123'\n//   let encrypted = '02b353bf5358995bc7d193ed1ce9c2eaec2b694b21d2f96232c9d6a0832121d1'\n//\n//   let result = utils.encrypt(password)\n//   t.is(result, encrypted)\n// })\n//\n// test('get user', async t => {\n//   let db = t.context.db\n//\n//   t.is(typeof db.getUser, 'function', 'getUser is a function')\n//\n//   let user = fixtures.getUser()\n//   let created = await db.saveUser(user)\n//   let result = await db.getUser(user.username)\n//\n//   t.deepEqual(created, result)\n//\n//   t.throws(db.getUser('foo'), /not found/)\n// })\n//\n// test('authenticate user', async t => {\n//   let db = t.context.db\n//   t.is(typeof db.authenticate, 'function', 'authenticate is a function')\n//\n//   let user = fixtures.getUser()\n//   let plainPassword = user.password\n//   await db.saveUser(user)\n//\n//   let success = await db.authenticate(user.username, plainPassword)\n//   t.true(success)\n//\n//   let fail = await db.authenticate(user.username, 'fooo')\n//   t.false(fail)\n//\n//   let failure = await db.authenticate('foo', 'bar')\n//   t.false(failure)\n// })\n\n// test('list image by tag', async t => {\n//   let db = t.context.db\n//   t.is(typeof db.getImagesByTag, 'function', 'get ImagesBytag is a function')\n//\n//   let images = fixtures.getImages(1)\n//   let tag = '#filterit'\n//   let random = Math.round(Math.random() * images.length)\n//\n//   let saveImages = []\n//   for (let i = 0; i < images.length; i) {\n//     if (i < random) {\n//       images[i].description = tag\n//     }\n//\n//     saveImages.push(db.saveImage(images[i]))\n//   }\n//\n//   // await Promise.all(saveImages)\n//\n//   let result = await db.getImagesByTag(tag)\n//   t.is(result.length, random)\n// })\n\n//\n// test('list images by tag', async t => {\n//   let db = t.context.db\n//   t.is(typeof db.getImagesByUser, 'function', 'get ImagesBytag is a function')\n//\n//   let images = fixtures.getImages(10)\n//   let tag = '#filterit'\n//   let random = Math.round(Math.random() * images.length)\n//\n//   let saveImages = []\n//   for (let i = 0; i < images.length; i) {\n//     if (i < random) {\n//       images[i].description = tag\n//     }\n//\n//     saveImages.push(db.saveImage(images[i]))\n//   }\n//\n//   await Promise.all(saveImages)\n//\n//   let result = await db.getImagesByTag(tag)\n//   t.is(result.length, random)\n// })\n\ntest('list images by users', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.getImagesByUser, 'function', 'get ImagesByUser is a function')\n\n  let images = fixtures.getImages(10)\n  let userId = uuid.uuid()\n  // let random = Math.round(Math.random() * images.length)\n  console.log(images.length)\n  let saveImages = []\n  for (let i = 0; i < images.length; i) {\n    // if (i < random) {\n    //   images[i].userId = userId\n    // }\n    images[i].userId = userId\n\n    saveImages.push(db.saveImage(images[i]))\n  }\n\n  await Promise.all(saveImages)\n\n  let result = await db.getImagesByUser(userId)\n  t.is(result.length, images.length)\n})\n"]}