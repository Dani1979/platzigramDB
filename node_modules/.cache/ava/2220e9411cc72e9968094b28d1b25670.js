'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const test = require('ava');

test('this should pass', t => {
  t.pass();
});

test('this should faild', t => {
  t.fail();
});

test('this should support async/await', (() => {
  var _ref = _asyncToGenerator(function* (t) {
    let p = Promise.resolve(42);
    let secret = yield p;
    t.is(secret, 42);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})());
//# sourceMappingURL=../node_modules/.cache/ava/2220e9411cc72e9968094b28d1b25670.js.map