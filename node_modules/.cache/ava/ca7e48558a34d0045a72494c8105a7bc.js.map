{"version":3,"sources":["db-test.js"],"names":["test","require","Db","uuid","r","fixtures","utils","beforeEach","t","dbName","v4","db","connect","context","true","connected","afterEach","always","disconnect","false","conn","dbDrop","run","is","saveImage","image","getImage","created","description","url","likes","liked","deepEqual","tags","userId","id","publicId","encode","truthy","createdAt","likeImage","result","throws","images","getImages","saveImages","map","img","Promise","all","lenght","password","encrypted","encrypt","getUser","user","saveUser","username","authenticate","plainPassword","success","fail","failure","getImagesByTag"],"mappings":"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","file":"db-test.js","sourcesContent":["'use strict'\nconst test = require('ava')\n// importamos el wrap que hemos hecho en index js para\n// importar la calse de db\nconst Db = require('../')\nconst uuid = require('uuid-base62')\n// const r = require('rethinkdb')\nconst r = require('rethinkdb')\nconst fixtures = require('./fixtures')\nconst utils = require('../lib/utils')\n\n// test.before('setup database', async t => {\n//   await db.connect()\n//   t.true(db.connected, 'should be connected')\n// })\n//\n// test.after('disconnect databese', async t => {\n//   await db.disconnect()\n//   t.false(db.connected, 'should be disconneted')\n// })\n//\n// test.after.always('cleanup database', async t => {\n//   let conn = await r.connect({})\n//   await r.dbDrop(dbName).run(conn)\n// })\n\ntest.beforeEach('setup database', async t => {\n  const dbName = `platzigram_${uuid.v4()}`\n  const db = new Db({ db: dbName })\n  await db.connect()\n  t.context.db = db\n  t.context.dbName = dbName\n  t.true(db.connected, 'should be connected')\n})\n\ntest.afterEach.always('cleanup database', async t => {\n  let db = t.context.db\n  let dbName = t.context.dbName\n\n  await db.disconnect()\n  t.false(db.connected, 'should be disconnect')\n\n  let conn = await r.connect({})\n  await r.dbDrop(dbName).run(conn)\n})\n\ntest('save image', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.saveImage, 'function', 'save image is a function')\n\n  let image = fixtures.getImage()\n\n  let created = await db.saveImage(image)\n  t.is(created.description, image.description)\n  t.is(created.url, image.url)\n  t.is(created.likes, image.likes)\n  t.is(created.liked, image.liked)\n  t.deepEqual(created.tags, [ 'awesome', 'tags', 'platzi' ])\n  t.is(created.userId, image.userId)\n  t.is(typeof created.id, 'string')\n  t.is(created.publicId, uuid.encode(created.id))\n  t.truthy(created.createdAt)\n})\n\ntest('like image', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.likeImage, 'function', 'like Images is a function')\n\n  let image = fixtures.getImage()\n  let created = await db.saveImage(image)\n  let result = await db.likeImage(created.publicId)\n\n  t.true(result.liked)\n  t.is(result.likes, image.likes + 1)\n})\n\ntest('Get Image', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.getImage, 'function', 'getImage is a function')\n\n  let image = fixtures.getImage()\n  let created = await db.saveImage(image)\n  let result = await db.getImage(created.publicId)\n\n  t.deepEqual(created, result)\n\n  t.throws(db.getImage('foo'), /not found/)\n})\n\ntest('list all images', async t => {\n  let db = t.context.db\n\n  let images = fixtures.getImages(5)\n  // con la siguiente sentencia nos vamos a crear un array de promesas que posteriormente\n  // las resolvemos todas mediante promise.all\n  let saveImages = images.map(img => db.saveImage(img))\n  let created = await Promise.all(saveImages)\n  let result = await db.getImages()\n\n  t.is(created.lenght, result.lenght)\n})\n\ntest('encrypt password', t => {\n  let password = 'foo123'\n  let encrypted = '02b353bf5358995bc7d193ed1ce9c2eaec2b694b21d2f96232c9d6a0832121d1'\n\n  let result = utils.encrypt(password)\n  t.is(result, encrypted)\n})\n\ntest('get user', async t => {\n  let db = t.context.db\n\n  t.is(typeof db.getUser, 'function', 'getUser is a function')\n\n  let user = fixtures.getUser()\n  let created = await db.saveUser(user)\n  let result = await db.getUser(user.username)\n\n  t.deepEqual(created, result)\n\n  t.throws(db.getUser('foo'), /not found/)\n})\n\ntest('authenticate user', async t => {\n  let db = t.context.db\n  t.is(typeof db.authenticate, 'function', 'authenticate is a function')\n\n  let user = fixtures.getUser()\n  let plainPassword = user.password\n  await db.saveUser(user)\n\n  let success = await db.authenticate(user.username, plainPassword)\n  t.true(success)\n\n  let fail = await db.authenticate(user.username, 'fooo')\n  t.false(fail)\n\n  let failure = await db.authenticate('foo', 'bar')\n  t.false(failure)\n})\n\ntest('list image by tag', async t => {\n  let db = t.context.db\n  t.is(typeof db.getImagesByTag, 'function', 'get ImagesBytag is a function')\n})\n\n//\n// test('list images by tag', async t => {\n//   let db = t.context.db\n//   t.is(typeof db.getImagesByUser, 'function', 'get ImagesBytag is a function')\n//\n//   let images = fixtures.getImages(10)\n//   let tag = '#filterit'\n//   let random = Math.round(Math.random() * images.length)\n//\n//   let saveImages = []\n//   for (let i = 0; i < images.length; i) {\n//     if (i < random) {\n//       images[i].description = tag\n//     }\n//\n//     saveImages.push(db.saveImage(images[i]))\n//   }\n//\n//   await Promise.all(saveImages)\n//\n//   let result = await db.getImagesByTag(tag)\n//   t.is(result.length, random)\n// })\n\n// test('list images by users', async t => {\n//   let db = t.context.db\n//\n//   t.is(typeof db.getImagesByUser, 'function', 'get ImagesByUser is a function')\n//\n//   let images = fixtures.getImages(10)\n//   let userId = uuid.uuid()\n//   let random = Math.round(Math.random() * images.length)\n//\n//   let saveImages = []\n//   for (let i = 0; i < images.length; i) {\n//     if (i < random) {\n//       images[i].userId = userId\n//     }\n//\n//     saveImages.push(db.saveImage(images[i]))\n//   }\n//\n//   await Promise.all(saveImages)\n//\n//   let result = await db.getImagesByUser(userId)\n//   t.is(result.length, random)\n// })\n"]}